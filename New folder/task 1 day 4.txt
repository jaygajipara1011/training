let form = document.getElementById("myForm");
form.addEventListener("submit", function (event) {
  event.preventDefault();

  let name = document.getElementById("name").value;
  let password = document.getElementById("password").value;
  let mobile = document.getElementById("mobile").value;
  let email = document.getElementById("email").value;

  // Validate name input
  if (!name.match(/^[a-zA-Z\s]{8,16}$/)) {
    alert("Name should contain only alphabets and spaces and be between 8 to 16 characters long.");
    return;
  }

  // Validate password input
  if (!password.match(/^.{8,16}$/)) {
    alert("Password should be between 8 to 16 characters long.");
    return;
  }

  // Validate mobile number input
  if (!mobile.match(/^\d{10}$/)) {
    alert("Mobile number should contain exactly 10 digits.");
    return;
  }

  // Validate email input
  if (!isValidEmail(email) || /^\d/.test(email)) {
    alert("Please enter a valid email address");
    return;
  }

  // Check if mobile number already exists
  if (isDuplicateMobile(mobile)) {
    alert("Mobile number already exists.");
    return;
  }

  // Check if email already exists
  if (isDuplicateEmail(email)) {
    alert("Email already exists.");
    return;
  }

  let userData = {
    name: name,
    password: password,
    mobile: mobile,
    email: email,
  };

  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];
  existingData.push(userData);

  localStorage.setItem("userDetails", JSON.stringify(existingData));

  displayRecords();
  location.reload();
});

function isValidEmail(email) {
  // Regular expression for validating email addresses
  // This regex is a simplified version, for a more comprehensive regex, consider using a library or a more complex expression.
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

function isDuplicateMobile(mobile) {
  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];
  return existingData.some(data => data.mobile === mobile);
}

function isDuplicateEmail(email) {
  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];
  return existingData.some(data => data.email === email);
}

function displayRecords() {
  let recordsTable = document
    .getElementById("recordsTable")
    .getElementsByTagName("tbody")[0];
  recordsTable.innerHTML = "";

  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];

  existingData.forEach(function (data) {
    let row = recordsTable.insertRow();
    let nameCell = row.insertCell(0);
    let passwordCell = row.insertCell(1);
    let mobileCell = row.insertCell(2);
    let emailCell = row.insertCell(3);
    let actionCell = row.insertCell(4);

    nameCell.innerHTML = data.name;
    passwordCell.innerHTML = data.password;
    mobileCell.innerHTML = data.mobile;
    emailCell.innerHTML = data.email;
    actionCell.innerHTML =
      '<span class="edit-btn" onclick="editRecord(this)">Edit</span> | <span class="delete-btn" onclick="deleteRecord(this)">Delete</span>';
  });
}

function editRecord(row) {
  let selectedRow = row.parentNode.parentNode;
  let name = selectedRow.cells[0].innerHTML;
  let password = selectedRow.cells[1].innerHTML;
  let mobile = selectedRow.cells[2].innerHTML;
  let email = selectedRow.cells[3].innerHTML;

  document.getElementById("name").value = name;
  document.getElementById("password").value = password;
  document.getElementById("mobile").value = mobile;
  document.getElementById("email").value = email;

  // Remove the record from local storage
  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];
  existingData.splice(selectedRow.rowIndex - 1, 1);
  localStorage.setItem("userDetails", JSON.stringify(existingData));

  // Remove the record from the table
  selectedRow.remove();
}

function deleteRecord(row) {
  let selectedRow = row.parentNode.parentNode;

  // Remove the record from local storage
  let existingData = JSON.parse(localStorage.getItem("userDetails")) || [];
  existingData.splice(selectedRow.rowIndex - 1, 1);
  localStorage.setItem("userDetails", JSON.stringify(existingData));

  // Remove the record from the table
  selectedRow.remove();
}

// Display records when the page loads
displayRecords();
